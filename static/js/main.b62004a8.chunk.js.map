{"version":3,"sources":["components/Filters/Filters.jsx","components/Todo/Todo.jsx","components/TodoList/TodoList.jsx","App.js","index.js"],"names":["Filters","setTypeFilter","todoActiveCount","todos","setTodos","todoDoneCount","typeFilter","className","length","href","classNames","selected","onClick","event","target","innerText","type","filter","item","completed","Todo","id","changeProcessTodo","deleteTodo","changeTodoItem","useState","editing","setEditing","editedTodo","setEditedTodo","onChange","checked","onDoubleClick","autoFocus","defaultValue","value","onKeyDown","key","onBlur","TodoList","map","todo","App","currentTitleValue","setCurrentTitleValue","visibleTodos","setVisibleTodos","todoId","every","useEffect","JSON","parse","localStorage","getItem","setItem","stringify","onSubmit","preventDefault","placeholder","trimLeft","Date","now","htmlFor","newTodo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b62004a8.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const Filters = ({\n  setTypeFilter,\n  todoActiveCount,\n  todos,\n  setTodos,\n  todoDoneCount,\n  typeFilter,\n}) => (\n  <>\n    <span className=\"todo-count\">\n      {`${todoActiveCount().length} items left`}\n    </span>\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className={classNames({ selected: typeFilter === 'All' })}\n          onClick={event => setTypeFilter(event.target.innerText)}\n        >\n          All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          className={classNames({ selected: typeFilter === 'Active' })}\n          onClick={event => setTypeFilter(event.target.innerText)}\n        >\n          Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/completed\"\n          className={classNames({ selected: typeFilter === 'Completed' })}\n          onClick={event => setTypeFilter(event.target.innerText)}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n\n    {(todoDoneCount().length > 0) && (\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={() => setTodos(todos.filter(item => !item.completed))}\n      >\n        Clear completed\n      </button>\n    )}\n  </>\n);\n\nFilters.propTypes = {\n  setTypeFilter: PropTypes.func.isRequired,\n  todoActiveCount: PropTypes.func.isRequired,\n  setTodos: PropTypes.func.isRequired,\n  todoDoneCount: PropTypes.func.isRequired,\n  typeFilter: PropTypes.bool.isRequired,\n  todos: PropTypes.arrayOf().isRequired,\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const Todo = ({\n  todos,\n  id,\n  completed,\n  changeProcessTodo,\n  deleteTodo,\n  changeTodoItem,\n}) => {\n  const [editing, setEditing] = useState(false);\n  const [editedTodo, setEditedTodo] = useState('');\n\n  const handleEdit = (event) => {\n    if (event.key === 'Enter' && editedTodo) {\n      changeTodoItem(id, editedTodo);\n      setEditing(false);\n      setEditedTodo('');\n    } else if (event.key === 'Enter' && !editedTodo) {\n      deleteTodo(id);\n      setEditing(false);\n      setEditedTodo('');\n    }\n\n    if (event.key === 'Escape') {\n      setEditedTodo('');\n      setEditing(false);\n    }\n  };\n\n  const handleSaveChanges = () => {\n    if (editedTodo) {\n      changeTodoItem(id, editedTodo);\n      setEditing(false);\n      setEditedTodo('');\n    } else {\n      setEditing(false);\n      setEditedTodo('');\n    }\n  };\n\n  return (\n    <li className={classNames({\n      completed,\n      editing,\n    })}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          onChange={() => changeProcessTodo(id)}\n          checked={completed}\n        />\n        <label\n          onDoubleClick={() => setEditing(true)}\n        >\n          {todos}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => deleteTodo(id)}\n        />\n      </div>\n      {editing && (\n        <input\n          autoFocus\n          type=\"text\"\n          className=\"edit\"\n          defaultValue={todos}\n          onChange={event => setEditedTodo(event.target.value)}\n          onKeyDown={handleEdit}\n          onBlur={handleSaveChanges}\n        />\n      )}\n    </li>\n  );\n};\n\nTodo.propTypes = {\n  todos: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n  completed: PropTypes.bool.isRequired,\n  changeProcessTodo: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeTodoItem: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Todo } from '../Todo/Todo';\n\nexport const TodoList = ({\n  todos,\n  changeProcessTodo,\n  deleteTodo,\n  changeTodoItem,\n}) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <Todo\n        key={todo.id}\n        {...todo}\n        changeProcessTodo={changeProcessTodo}\n        deleteTodo={deleteTodo}\n        changeTodoItem={changeTodoItem}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  changeProcessTodo: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeTodoItem: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n      todos: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport { Filters } from './components/Filters/Filters';\nimport { TodoList } from './components/TodoList/TodoList';\n\nfunction App() {\n  const [currentTitleValue, setCurrentTitleValue] = useState('');\n  const [todos, setTodos] = useState([]);\n  const [visibleTodos, setVisibleTodos] = useState([]);\n  const [typeFilter, setTypeFilter] = useState('All');\n\n  useEffect(() => {\n    if (JSON.parse(localStorage.getItem('todos'))) {\n      setTodos(JSON.parse(localStorage.getItem('todos')));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  function addTodo() {\n    setTodos([\n      ...todos,\n      {\n        id: +Date.now(),\n        todos: currentTitleValue,\n        completed: false,\n      },\n    ]);\n    setCurrentTitleValue('');\n  }\n\n  useEffect(() => {\n    setVisibleTodos([\n      todos,\n    ]);\n  }, [todos]);\n\n  function changeProcessTodo(todoId) {\n    if (typeof todoId === 'number') {\n      setTodos(todos.map((todo) => {\n        if (todo.id === todoId) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }));\n    } else {\n      setTodos(todos.map(todo => (\n        todos.every(item => (item.completed))\n          ? ({\n            ...todo,\n            completed: false,\n          })\n          : ({\n            ...todo,\n            completed: true,\n          })\n      )));\n    }\n  }\n\n  useEffect(() => {\n    switch (typeFilter) {\n      case 'All':\n        setVisibleTodos(todos);\n        break;\n      case 'Active':\n        setVisibleTodos(todos.filter(item => !item.completed));\n        break;\n      case 'Completed':\n        setVisibleTodos(todos.filter(item => item.completed));\n        break;\n      default:\n        break;\n    }\n  }, [typeFilter, todos]);\n\n  const todoActiveCount = () => todos.filter(item => !item.completed === true);\n  const todoDoneCount = () => todos.filter(item => item.completed === true);\n\n  const deleteTodo = id => setTodos(todos.filter(item => item.id !== id));\n\n  const changeTodoItem = (id, newTodo) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id !== id) {\n        return todo;\n      }\n\n      return {\n        ...todo,\n        todos: newTodo,\n      };\n    }));\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos App</h1>\n\n        <form onSubmit={(event) => {\n          event.preventDefault();\n        }}\n        >\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={currentTitleValue}\n            onChange={({ target }) => setCurrentTitleValue(target\n              .value.trimLeft())}\n            onKeyDown={(event) => {\n              ((event.key === 'Enter') && (currentTitleValue)) && (addTodo());\n            }}\n          />\n        </form>\n      </header>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          onClick={() => changeProcessTodo()}\n        />\n        {(todos.length > 0) && (\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n        )}\n\n        <TodoList\n          todos={visibleTodos}\n          changeProcessTodo={changeProcessTodo}\n          deleteTodo={deleteTodo}\n          changeTodoItem={changeTodoItem}\n        />\n      </section>\n      {(todos.length > 0)\n        && (\n          <footer className=\"footer\">\n            <Filters\n              todos={todos}\n              setTodos={setTodos}\n              setTypeFilter={setTypeFilter}\n              todoActiveCount={todoActiveCount}\n              todoDoneCount={todoDoneCount}\n              typeFilter={typeFilter}\n            />\n          </footer>\n        )\n      }\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}